// A program is a list of statements
<program> ::= <statement_list>
<statement_list> ::= <statement_list> <statement> | epsilon

// A statement is either an assignent, an expression, or a return
<statement> ::= <assignment> ";" | <expression> ";" | <return> ";"

// Return
<return> ::= "return" <expression>

// An assignment consists of a type, identifier, "=", and expression
<assignment> ::= <type> <identifier> "=" <expression>
<type> ::= "i32" | "bool" | "string" 
<identifier> ::= [a-zA-Z_][a-zA-Z0-9_]*

// Expression 
<expression> ::= <literal> | <identifier> | <function> | <call> | <binary_expr> | <if_expr> | "(" <expression> ")"
<binary_expr> ::= <expression> <operator> <expression>
<if_expr> ::= "if" "(" <expression> ")" <expression> ("else" <expression>)?

// Operator
<operator> ::= "+" | "-" | "*" | "/" | "==" | "!=" | "<" | "<=" | ">" | ">=" | "&&" | "||"

// Literal
<literal> ::= <integer_literal> | <boolean_literal> | <string_literal>
<integer_literal> ::= [0-9]+
<boolean_literal> ::= "true" | "false"
<string_literal>  ::= '"' [^"]* '"'

// Function (anonymous)
<function> ::= "fn" "(" <parameter_list> ")" "{"  <statement_list> "}"
<parameter_list> ::= <parameter> ("," <parameter>)*
<parameter> ::= <type> ":" <identifier>

// Call
<call> ::= <expression> "(" <argument_list> ")"
<argument_list> ::= <expression> ("," <expression>)*
